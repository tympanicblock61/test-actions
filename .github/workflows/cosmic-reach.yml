name: Download Itch.io Files

on:
  schedule:
    - cron: '0 5 * * *'  # 12 AM EST (5 AM UTC)
  workflow_dispatch:  # Allows manual triggering

jobs:
  download_files:
    runs-on: ubuntu-latest
    environment: itch_io

    env:
      ITCH_API_KEY: ${{ secrets.ITCH_API_KEY }}  # Pass the secret API key securely

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Echo the ITCH_API_KEY environment variable
      run: |
        echo "ITCH_API_KEY is: $ITCH_API_KEY"  # This will print the value of the secret in the logs
      env:
        ITCH_API_KEY: ${{ secrets.ITCH_API_KEY }}  # Pass the secret API key securely

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Download Itch.io Files
      run: |
        python - <<EOF
        import os
        import requests
        key = os.getenv("ITCH_API_KEY")
        
        headers = {"Authorization": key}
        
        # Fetch game data and uploads
        game_data = requests.get(f"https://finalforeach.itch.io/cosmic-reach/data.json").json()
        uploads = requests.get(f"https://api.itch.io/games/{game_data['id']}/uploads", headers=headers).json()["uploads"]
        
        jar = None
        server = None
        for upload in uploads:
            if upload["channel_name"] == "jar":
                jar = upload
            if upload["channel_name"] == "server":
                server = upload
        
        # Download files based on conditions
        if jar is not None and server is None:
            with open(jar["filename"], "wb") as e:
                e.write(requests.get(f"https://api.itch.io/uploads/{jar['build']['upload_id']}/download", headers=headers).content)
        
        elif server is not None and jar is None:
            with open(server["filename"], "wb") as e:
                e.write(requests.get(f"https://api.itch.io/uploads/{server['build']['upload_id']}/download", headers=headers).content)
        
        elif jar is not None and server is not None and jar["build"]["user_version"] == server["build"]["user_version"]:
            with open(jar["filename"], "wb") as e:
                e.write(requests.get(f"https://api.itch.io/uploads/{jar['build']['upload_id']}/download", headers=headers).content)
            with open(server["filename"], "wb") as e:
                e.write(requests.get(f"https://api.itch.io/uploads/{server['build']['upload_id']}/download", headers=headers).content)
        for f in os.listdir():
            print(f)
        EOF
